import pexpect
import glob

## pexpect basics

results = pexpect.run("ls -l")
#results.splitlines()[2] is wrong because it is out of range

results.splitlines()[1]
# results is a string of the output generated by runing "ls -l" in shell. The comand results.splitlines() split the string in lines, that can be called one by one using numbers inside of []. In this case, [1] is screening the second line of the output as a string.


## Homework 1

newprimates = open("primates2.nex", "w")
oldprimates = open("primates.nex").read() #reads entire contents of primates.nex as a string
corrected = oldprimates
corrected.find("mcmc") # finds the position os the first letter in "mcmc"
corrected = corrected.replace(corrected[11344:11348], "mcmcp")
newprimates.write(corrected)
newprimates.close()

child = pexpect.spawn ("mb -i primates2.nex") #-i tells mrbayes to run in interactive mode
#send the string "mcmc" to the process. This tells mrbayes to start running. The \r is carriage return
child.sendline(r"mcmc")
# tells mrbayes to stop the analysis (do not continue)
child.sendline("no")
child.expect("MrBayes >") # wait for the mrbayes prompt.
print child.before # child.before shows all of the screen output
##now add a line to tell mrbayes to quit ("quit")
child.sendline("quit")


## Homework 2

#results = pexpect.run("mb primates2.nex")

child = pexpect.spawn("mb -i primates2.nex")
child.sendline("execute primates2.nex")
child.sendline("sumt")
child.expect("MrBayes >")
print child.before
child.sendline("sump")
child.sendline("quit")

## Homework 3

#nexus_files =glob.glob("*.nex")
#for nex in nexus_files:
#output = pexpect.run("mb nex")

def function (nexfile, numgen = 1000):
child = pexpect.spawn("mb -i %s" %(nexfile))
child.sendline("set nowarn = yes")
child.sendline("mcmcp ngen = %d" %(numgen))
child.sendline(r"mcmc")
child.sendline("no")
child.sendline("quit")

def function2 (nexfile):
child = pexpect.spawn("mb -i %s" %(nexfile))
child.sendline("execute %s" %(nexfile))
child.sendline("sumt")
child.sendline("sump")
child.sendline("quit")

files =glob.glob("*")
t_files =glob.glob("*.t")
print "there are %d total files in the current directory and %d files that end in '.t'" %(len(files), len(t_files))

function ("primates2.nex")
function2 ("primates2.nex")

files =glob.glob("*")
t_files =glob.glob("*.t")
print "there are %d total files in the current directory and %d files that end in '.t'" %(len(files), len(t_files))

print "these files end in '.t': " + str(t_files)

# with % -> %d is for digitis and %s for strings
#example: print "there are %s lines" %("five")
